<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zzh&#39;s Notes</title>
  
  <subtitle>Choose your love, Love your choice</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-12T14:53:33.333Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HK journalist</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用数组实现队列</title>
    <link href="http://yoursite.com/2018/06/22/queue_array/"/>
    <id>http://yoursite.com/2018/06/22/queue_array/</id>
    <published>2018-06-22T07:08:32.000Z</published>
    <updated>2018-10-12T14:53:33.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用数组实现队列的几种方式"><a href="#用数组实现队列的几种方式" class="headerlink" title="用数组实现队列的几种方式"></a>用数组实现队列的几种方式</h1><p>队列是一种先入先出的数据结构，使用数组可以做简单的实现。刚开始我想到的实现方式是不利用指针，每次push都将所有元素向后移动一位，时间复杂度较高。看到一个讲解的教程，实现得比较好，重新写了一遍，记录一下。</p><h3 id="1-线状队列"><a href="#1-线状队列" class="headerlink" title="1. 线状队列"></a>1. 线状队列</h3><p>指针即两个记录队头和队尾的位置的变量，通过指针可以大幅减少元素移动的次数：</p><a id="more"></a><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueByArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer[] data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> len = <span class="number">100</span>;<span class="comment">//队列长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> head;<span class="comment">//队头 取出元素的一端</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tail;<span class="comment">//队尾 加入元素的一端</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QueueByArray</span><span class="params">()</span></span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> Integer[len];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">push</span><span class="params">(Integer c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tail &lt; len)&#123; <span class="comment">//如果未达到数组最后一位</span></span><br><span class="line">            data[tail] = c;</span><br><span class="line">            ++tail;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">//如果尾部已达到数组最后一位</span></span><br><span class="line">            <span class="keyword">if</span>(head == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//如果数组已满，返回false</span></span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">//如果数组未满，进行移位运算</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(data[i] != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        data[i - tail] = data [i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                tail -= head;</span><br><span class="line">                head = <span class="number">0</span>;</span><br><span class="line">                push(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == tail)&#123; <span class="comment">//队头队尾相等说明没有元素存在了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">//如果存在元素 取出元素</span></span><br><span class="line">            Integer item = data[head];</span><br><span class="line">            data[head++] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          QueueByArray qa = <span class="keyword">new</span> QueueByArray();</span><br><span class="line">        Runnable putTask = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">                qa.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread put1 = <span class="keyword">new</span> Thread(putTask);</span><br><span class="line">        Thread put2 = <span class="keyword">new</span> Thread(putTask);</span><br><span class="line">        Runnable getTask = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">                System.out.println(qa.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread get1 = <span class="keyword">new</span> Thread(getTask);</span><br><span class="line">        Thread get2 = <span class="keyword">new</span> Thread(getTask);</span><br><span class="line">        put1.start();</span><br><span class="line">        get1.start();</span><br><span class="line">        put2.start();</span><br><span class="line">        get2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>队列左出右进，push方法在数组右侧有空位时直接放入；没有空位时查看head指针位置，如果左侧有空位，对整个队列进行移位操作；如果左侧也没有空位返回false;</p><p>get方法先比较队头与队尾的指针，如果相等，说明队列中没有元素，返回null. 如果存在元素，返回head指针所指的元素，并将head指针向后移动一位。</p><h3 id="2-环装队列"><a href="#2-环装队列" class="headerlink" title="2. 环装队列"></a>2. 环装队列</h3><p>环状队列通过将数组视为环装，如果数组末尾已经放满，不会去进行移位，而是绕回到数组开头。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数组：items，数组大小：n</span></span><br><span class="line">    <span class="keyword">private</span> String[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// head 表示队头下标，tail 表示队尾下标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请一个大小为 capacity 的数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircularQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> String[capacity];</span><br><span class="line">        n = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enqueue</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 队列满了</span></span><br><span class="line">        <span class="keyword">if</span> ((tail + <span class="number">1</span>) % n == head) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        items[tail] = item;</span><br><span class="line">        tail = (tail + <span class="number">1</span>) % n;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果 head == tail 表示队列为空</span></span><br><span class="line">        <span class="keyword">if</span> (head == tail) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        String ret = items[head];</span><br><span class="line">        head = (head + <span class="number">1</span>) % n;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环装队列的关键在于判断队列是否已满的条件以及头尾指针的赋值。</p><p>判断队列是否满：(tail + 1) % n == head</p><p>head的新值：（head+1)%n</p><p>tail的新值：（tail + 1)% n</p><p>环装队列同样是线程不安全的，可以通过添加同步锁的方式保证线程安全，但是会严重影响执行效率。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用数组实现队列的几种方式&quot;&gt;&lt;a href=&quot;#用数组实现队列的几种方式&quot; class=&quot;headerlink&quot; title=&quot;用数组实现队列的几种方式&quot;&gt;&lt;/a&gt;用数组实现队列的几种方式&lt;/h1&gt;&lt;p&gt;队列是一种先入先出的数据结构，使用数组可以做简单的实现。刚开始我想到的实现方式是不利用指针，每次push都将所有元素向后移动一位，时间复杂度较高。看到一个讲解的教程，实现得比较好，重新写了一遍，记录一下。&lt;/p&gt;
&lt;h3 id=&quot;1-线状队列&quot;&gt;&lt;a href=&quot;#1-线状队列&quot; class=&quot;headerlink&quot; title=&quot;1. 线状队列&quot;&gt;&lt;/a&gt;1. 线状队列&lt;/h3&gt;&lt;p&gt;指针即两个记录队头和队尾的位置的变量，通过指针可以大幅减少元素移动的次数：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>es(一) elasticsearch安装</title>
    <link href="http://yoursite.com/2018/04/23/2018-04-22-elasticsearch-install/"/>
    <id>http://yoursite.com/2018/04/23/2018-04-22-elasticsearch-install/</id>
    <published>2018-04-23T14:13:20.000Z</published>
    <updated>2018-10-01T11:06:17.380Z</updated>
    
    <content type="html"><![CDATA[<p>按照官网上的指导安装了elasticsearch-6.0.1, 系统版本Ubuntu 16.04.3, 1g内存，记录一下遇到的问题</p><h2 id="1-安装位置"><a href="#1-安装位置" class="headerlink" title="1. 安装位置"></a>1. 安装位置</h2><p>我是用tar解压的方式安装的，起初安装在root的用户目录下，无法启动。mv到/opt目录之后可以启动</p><h2 id="2-JVM内存配置"><a href="#2-JVM内存配置" class="headerlink" title="2. JVM内存配置"></a>2. JVM内存配置</h2><p>修改config/jvm.options, 默认为1g，我修改为256m</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms256m #初始堆大小</span><br><span class="line">-Xmx256m #最大堆大小</span><br></pre></td></tr></table></figure><h2 id="3-root用户无法启动"><a href="#3-root用户无法启动" class="headerlink" title="3. root用户无法启动"></a>3. root用户无法启动</h2><p>es默认无法用root账户启动，有两个解决办法，</p><p>一是创建一个新用户，分配elasticsearch文件夹的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groupadd elk  <span class="comment"># 创建用户组elk</span></span><br><span class="line">useradd elk -g elk -p 111111  <span class="comment"># 创建新用户elk，-g elk 设置其用户组为 elk，-p 111 设置其密码6个1</span></span><br><span class="line">chown -R elk:elk /elasticsearch  <span class="comment"># 更改 /elasticsearch 文件夹及内部文件的所属用户及组为 elk:elk</span></span><br><span class="line">su elk <span class="comment"># 切换到非root用户elk下来</span></span><br></pre></td></tr></table></figure><p>二是赋予root启动权限：</p><p>在启动文件：bin/elasearch中加如下面一段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ES_JAVA_OPTS="-Des.insecure.allow.root=true"</span><br></pre></td></tr></table></figure><h2 id="4-系统参数修改"><a href="#4-系统参数修改" class="headerlink" title="4. 系统参数修改"></a>4. 系统参数修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR: bootstrap checks failed**</span><br><span class="line"></span><br><span class="line">max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</span><br><span class="line">max number of threads [1024] for user [lish] likely too low, increase to at least [2048]</span><br></pre></td></tr></table></figure><p>vi /etc/sysctl.conf </p><p>添加下面配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count=655360</span><br></pre></td></tr></table></figure><p>并执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>vi /etc/security/limits.d/90-nproc.conf </p><p>添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@elk soft nproc 2048</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照官网上的指导安装了elasticsearch-6.0.1, 系统版本Ubuntu 16.04.3, 1g内存，记录一下遇到的问题&lt;/p&gt;
&lt;h2 id=&quot;1-安装位置&quot;&gt;&lt;a href=&quot;#1-安装位置&quot; class=&quot;headerlink&quot; title=&quot;1. 安装位置&quot;&gt;&lt;/a&gt;1. 安装位置&lt;/h2&gt;&lt;p&gt;我是用tar解压的方式安装的，起初安装在root的用户目录下，无法启动。mv到/opt目录之后可以启动&lt;/p&gt;
&lt;h2 id=&quot;2-JVM内存配置&quot;&gt;&lt;a href=&quot;#2-JVM内存配置&quot; class=&quot;headerlink&quot; title=&quot;2. JVM内存配置&quot;&gt;&lt;/a&gt;2. JVM内存配置&lt;/h2&gt;&lt;p&gt;修改config/jvm.options, 默认为1g，我修改为256m&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>一种线程池的简单实现</title>
    <link href="http://yoursite.com/2018/04/22/2018-04-22-%E4%B8%80%E7%A7%8D%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/04/22/2018-04-22-一种线程池的简单实现/</id>
    <published>2018-04-22T07:08:32.000Z</published>
    <updated>2018-09-20T11:21:06.893Z</updated>
    
    <content type="html"><![CDATA[<p>线程池是面试中的常客，这次我要通过自己实现一个线程池的方式来搞懂它的原理。</p><h2 id="线程池实现"><a href="#线程池实现" class="headerlink" title="线程池实现"></a>线程池实现</h2><p>JDK中的中的线程池实现主要在ThreadPoolExecutor这个类里；</p><p>我们可以看一下线程池都有些什么变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;Worker&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> shutdown = <span class="keyword">true</span>; <span class="comment">//这里简化成了boolean类型，原来有多种状态</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>workQueue</p><p>用来保存和输出Runnable任务的队列</p></li><li><p>workers</p><p>拥有所有运行线程的集合</p></li><li><p>shutdown</p><p>线程池是否关闭</p></li></ul><p>运用上面三个变量，我们实现一个类似fixThreadPool的线程池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomThreadPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> shutdown = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Runnable&gt; taskQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Worker&gt; workSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 线程池启动的时候，workSet就会被运行线程填满，线程池大小为poolSize</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomThreadPool</span><span class="params">(Set&lt;Worker&gt; workSet, <span class="keyword">int</span> poolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(poolSize &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            Worker worker = <span class="keyword">new</span> Worker(taskQueue);</span><br><span class="line">            workSet.add(worker);</span><br><span class="line">            <span class="keyword">new</span> Thread(worker).start();</span><br><span class="line">            poolSize--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * submit()方法提交任务，任务添加到taskQueue中</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(Runnable runnable)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(shutdown)shutdown = <span class="keyword">false</span>;</span><br><span class="line">        taskQueue.add(runnable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * shutdown中止所有线程</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Worker thread : workSet)&#123;</span><br><span class="line">            thread.interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">        workSet.clear();</span><br><span class="line">        taskQueue.clear();</span><br><span class="line">        shutdown = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Runnable&gt; taskQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 关键在于Worker的run方法</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!CustomThreadPool.shutdown)&#123;</span><br><span class="line">            Runnable task = taskQueue.poll();</span><br><span class="line">            <span class="keyword">if</span>(task != <span class="keyword">null</span>) task.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(Queue&lt;Runnable&gt; taskQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.taskQueue = taskQueue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线程池是面试中的常客，这次我要通过自己实现一个线程池的方式来搞懂它的原理。&lt;/p&gt;
&lt;h2 id=&quot;线程池实现&quot;&gt;&lt;a href=&quot;#线程池实现&quot; class=&quot;headerlink&quot; title=&quot;线程池实现&quot;&gt;&lt;/a&gt;线程池实现&lt;/h2&gt;&lt;p&gt;JDK中的中的线程池实现主要在ThreadPoolExecutor这个类里；&lt;/p&gt;
&lt;p&gt;我们可以看一下线程池都有些什么变量：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; BlockingQueue&amp;lt;Runnable&amp;gt; workQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; HashSet&amp;lt;Worker&amp;gt; workers = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;Worker&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; shutdown = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//这里简化成了boolean类型，原来有多种状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+Scheduled实现定时任务</title>
    <link href="http://yoursite.com/2017/05/23/Scheduled%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2017/05/23/Scheduled实现定时任务/</id>
    <published>2017-05-23T04:35:47.000Z</published>
    <updated>2017-12-24T14:13:59.595Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot的Spring-context的org.springframework.scheduling包下，有任务队列模块。不需要引入多余的包就可以实现定时任务。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">30000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Random random  = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> passWord = random.nextInt();</span><br><span class="line"></span><br><span class="line">        userMapper.updateUser(String.valueOf(passWord));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里实现了定时更新数据库(30秒)，<code>@Scheduled</code>配置方式有很多：<br>1.<code>fixedDelay = 30000</code>，以上一次任务结束为基准，30秒后执行下一次<br>2.<code>fixedRate = 30000</code>，以上一次任务开始为基准，30秒后执行下一次<br>3.<code>cron = &quot;0 0 2 * * ?&quot;</code>，每天凌晨2点执行</p><ul><li><p>cron表达式共有7个时间元素：<br>按顺序依次为<br>秒（0~59）<br>分钟（0~59）<br>小时（0~23）<br>天（月）（0~31，但是你需要考虑你月的天数）<br>月（0~11）<br>天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）<br>年份（1970－2099）<br>其中年份可以省略，一般只用前6项足矣。</p></li><li><p>其中每个元素可以是一个值(如6),一个连续区间(9-12),一个间隔时间(8-18/4)(/表示每隔4小时),一个列表(1,3,5),通配符。由于”月份中的日期”和”星期中的日期”这两个元素互斥的,必须要对其中一个设置?.</p></li></ul><blockquote><p>0 0 10,14,16 <em> </em> ? 每天上午10点，下午2点，4点<br>0 0/30 9-17 <em> </em> ?   朝九晚五工作时间内每半小时<br>0 0 12 ? <em> WED 表示每个星期三中午12点<br>“0 0 12 </em> <em> ?” 每天中午12点触发<br>“0 15 10 ? </em> <em>“ 每天上午10:15触发<br>“0 15 10 </em> <em> ?” 每天上午10:15触发<br>“0 15 10 </em> <em> ? </em>“ 每天上午10:15触发<br>“0 15 10 <em> </em> ? 2005” 2005年的每天上午10:15触发<br>“0 <em> 14 </em> <em> ?” 在每天下午2点到下午2:59期间的每1分钟触发<br>“0 0/5 14 </em> <em> ?” 在每天下午2点到下午2:55期间的每5分钟触发<br>“0 0/5 14,18 </em> <em> ?” 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发<br>“0 0-5 14 </em> <em> ?” 在每天下午2点到下午2:05期间的每1分钟触发<br>“0 10,44 14 ? 3 WED” 每年三月的星期三的下午2:10和2:44触发<br>“0 15 10 ? </em> MON-FRI” 周一至周五的上午10:15触发<br>“0 15 10 15 <em> ?” 每月15日上午10:15触发<br>“0 15 10 L </em> ?” 每月最后一日的上午10:15触发<br>“0 15 10 ? <em> 6L” 每月的最后一个星期五上午10:15触发<br>“0 15 10 ? </em> 6L 2002-2005” 2002年至2005年的每月的最后一个星期五上午10:15触发<br>“0 15 10 ? * 6#3” 每月的第三个星期五上午10:15触发 </p></blockquote><ul><li>有些子表达式能包含一些范围或列表</li></ul><p>例如：子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”</p><ul><li>“*”字符代表所有可能的值</li></ul><p>因此，“ <em> ”在子表达式（月）里表示每个月的含义，“ </em> ”在子表达式（天（星期））表示星期的每一天</p><ul><li>“/”字符用来指定数值的增量</li></ul><p>例如：在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟</p><p>在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样</p><ul><li>“？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值</li></ul><p>当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”</p><ul><li>“L” 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写</li></ul><p>但是它在两个子表达式里的含义是不同的。</p><p>在天（月）子表达式中，“L”表示一个月的最后一天</p><p>在天（星期）自表达式中，“L”表示一个星期的最后一天，也就是SAT</p><p>如果在“L”前有具体的内容，它就具有其他的含义了</p><p>例如：“6L”表示这个月的倒数第６天，“ＦＲＩＬ”表示这个月的最一个星期五</p><p>注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题</p><blockquote><p>字段 ——-  允许值   ——-    允许的特殊字符<br>秒      ———     <code>0-59</code>     ———      <code>, - * /</code><br>分      ———     <code>0-59</code>     ———     <code>, - * /</code><br>小时 ——-          <code>0-23</code>      ———     <code>, - * /</code><br>日期 ——-          <code>1-31</code>      ———     <code>, - * ? / L W C</code><br>月份 —    <code>1-12 或者 JAN-DEC</code>           <code>, - * /</code><br>星期 —-    <code>1-7 或者 SUN-SAT</code>           <code>, - * ? / L C #</code><br>年（可选）     <code>留空, 1970-2099</code>           <code>, - * /</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringBoot的Spring-context的org.springframework.scheduling包下，有任务队列模块。不需要引入多余的包就可以实现定时任务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="Scheduled" scheme="http://yoursite.com/tags/Scheduled/"/>
    
  </entry>
  
  <entry>
    <title>Ribbon实现服务消费和负载均衡</title>
    <link href="http://yoursite.com/2017/05/21/SpringBoot-Eureka-Ribbon/"/>
    <id>http://yoursite.com/2017/05/21/SpringBoot-Eureka-Ribbon/</id>
    <published>2017-05-21T07:37:09.000Z</published>
    <updated>2017-12-24T14:13:59.595Z</updated>
    
    <content type="html"><![CDATA[<p>接上回Eureka实现注册中心，这次我们要利用SpringBoot中Ribbon实现服务消费端以及服务端的负载均衡。</p><a id="more"></a><p>1.首先，要启动注册中心，启动多个服务提供端，即上一例中的CLIENT1. 启动的方式可以通过jar的方式启动：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar ***.jar --server.port=<span class="number">1994</span></span><br><span class="line">java -jar ***.jar --server.port=<span class="number">1995</span></span><br></pre></td></tr></table></figure></p><p>2.新建一个SpringBoot项目，引入web, eureka, ribbon的依赖：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;parent&gt;</span></span><br><span class="line"><span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;version&gt;1.5.6.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;relativePath/&gt;</span> <span class="string">&lt;!--</span> <span class="string">lookup</span> <span class="string">parent</span> <span class="string">from</span> <span class="string">repository</span> <span class="bullet">--&gt;</span></span><br><span class="line"><span class="string">&lt;/parent&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;properties&gt;</span></span><br><span class="line"><span class="string">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span></span><br><span class="line"><span class="string">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span></span><br><span class="line"><span class="string">&lt;java.version&gt;1.8&lt;/java.version&gt;</span></span><br><span class="line"><span class="string">&lt;spring-cloud.version&gt;Dalston.SR3&lt;/spring-cloud.version&gt;</span></span><br><span class="line"><span class="string">&lt;/properties&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;dependencies&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line"><span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">&lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line"><span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">&lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line"><span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line"><span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br><span class="line"><span class="string">&lt;/dependencies&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;dependencyManagement&gt;</span></span><br><span class="line"><span class="string">&lt;dependencies&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line"><span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;type&gt;pom&lt;/type&gt;</span></span><br><span class="line"><span class="string">&lt;scope&gt;import&lt;/scope&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br><span class="line"><span class="string">&lt;/dependencies&gt;</span></span><br><span class="line"><span class="string">&lt;/dependencyManagement&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.在启动类上加上注册客户端注解，创建调用REST接口的restTemplate实例，@LoadBalanced用来开启负载均衡：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoRibbonCustomerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DemoRibbonCustomerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.将消费端注册到注册中心<br>application.yml配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">2012</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://sever2.zzh123.com:1896/eureka/,http://server1.zzh123.com:1895/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">server_ribbon</span></span><br></pre></td></tr></table></figure></p><p>5.编辑控制类，调用服务端接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/ribbon-customer"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">"http://CLIENT1/"</span>,String.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意这里是用应用名CLIENT1来进行调用的</p><p>6.启动注册中心SERVER1895,SERVER1896，服务提供端CLIENT1(2)，服务消费端SERVER_RIBBON:</p><ul><li><p>SERVER1895,SERVER1896<br><img src="../../../../images/server_1895_ribbon.png" alt="server1895"><br><img src="../../../../images/server_1896_ribbon.png" alt="server1896"></p></li><li><p>访问服务消费端server_ribbon：<br><img src="../../../../images/client_ribbon.png" alt="ribbon_client"></p></li></ul><p>可以看到调用接口成功，得到了输出hello world</p><p>可以看到消费端控制台信息：<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DynamicServerListLoadBalancer for client CLIENT1 initialized: DynamicServerListLoadBalancer:&#123;NFLoadBalancer:name=CLIENT1,current list of Servers=[PC-ofzzh.lan:1896, PC-ofzzh.lan:1895],Load balancer stats=Zone stats: &#123;defaultzone=[Zone:defaultzone;Instance count:2;Active connections count: 0;Circuit breaker tripped count: 0;Active connections per server: 0.0;]</span><br></pre></td></tr></table></figure></p><p>检测到current list of Servers=[PC-ofzzh.lan:1896, PC-ofzzh.lan:1895]两个服务提供者，并且通过轮询达到了负载均衡的效果</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上回Eureka实现注册中心，这次我们要利用SpringBoot中Ribbon实现服务消费端以及服务端的负载均衡。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+eureka实现注册中心</title>
    <link href="http://yoursite.com/2017/05/18/SpringBoot-eureka/"/>
    <id>http://yoursite.com/2017/05/18/SpringBoot-eureka/</id>
    <published>2017-05-18T11:30:43.000Z</published>
    <updated>2017-12-24T14:13:59.596Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot集成eureka可以很容易的实现服务的注册管理，这是SpringCloud很重要的功能。通过一个demo记录一下配置的方式。SpringBoot版本1.5.6.RELEASE，SpringCloud版本Dalston.SR3.</p><a id="more"></a><h4 id="注册服务端"><a href="#注册服务端" class="headerlink" title="注册服务端"></a>注册服务端</h4><ul><li>引入依赖</li></ul><p>先创建一个SpringBoot项目，在IDEA中可以选中eureka-server依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是由IDEA在创建项目时自动生成的，目前还没有发现在项目建好之后自动添加依赖的方法。<code>&lt;dependencyManagement&gt;</code>标签里的内容是一个pom文件，用于SpringCloud的版本管理，里面记录了这个版本SpringCloud所包含的不同子模块版本，这样你就省去了在<code>&lt;dependency&gt;</code>里声明版本号，也不建议自己去设置版本号，因为<code>&lt;dependency&gt;</code>里的<code>&lt;version&gt;</code>优先级最高，如果引用了错误版本的依赖，可能会不兼容。</p><ul><li>配置注册中心信息<br>在resources/application.yml中配置如下</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">1895</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">server.zzh123.com</span> <span class="comment">#注意这里需要在host文件中添加 127.0.0.1 server.zzh123.com</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#禁止自我注册</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p>在启动类上加注解<code>@EnableEurekaServer</code>，然后启动，在浏览器访问<code>http://localhost:1895</code>即可进入注册中心的页面。</p><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>客户端的注册就更加简单了</p><ul><li>新建一个SpringBoot项目，步骤与上一个相同，application.yml文件如下</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">1994</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:1895/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">client1</span></span><br></pre></td></tr></table></figure><p>现在启动客户端的项目，就可以在<code>http://localhost:1895</code>下看到新注册的客户端了。</p><h4 id="注册中心集群"><a href="#注册中心集群" class="headerlink" title="注册中心集群"></a>注册中心集群</h4><p>为了防止注册中心意外挂掉，可以多设几个注册中心，让它们互相注册。我先按照网上的方法配置。<br>把刚刚的注册中心服务停掉，修改一下配置文件：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">server1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">1895</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">server1.zzh123.com</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://server2.zzh123.com:1896/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">server1</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">server1895</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">1896</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">server2.zzh123.com</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://server1.zzh123.com:1895/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">server2</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">server1896</span></span><br></pre></td></tr></table></figure></p><p>在host里这样配置</p><pre><code>127.0.0.1 server1.zzh123.com127.0.0.1 server2.zzh123.com</code></pre><p>注意刚刚的客户端也要修改一下配置文件：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://server2.zzh123.com:1896/eureka/,http://server1.zzh123.com:1895/eureka/</span></span><br></pre></td></tr></table></figure></p><p>在项目根目录下执行<code>mvn clean package</code>，如果使用IDEA，直接在右侧MAVEN选项那里点击clean和package按钮也可。使用命令行，进入target文件夹，启动项目：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar demo-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SNAPSHOT.jar --spring.profiles.active=server1</span><br><span class="line">java -jar demo-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SNAPSHOT.jar --spring.profiles.active=server2</span><br></pre></td></tr></table></figure></p><p>然后访问<code>localhost:1895/</code>，<code>localhost:1896/</code>，看到下面的界面：<br><img src="../../../../images/server_1.png" alt="server1895"><br><img src="../../../../images/server_2.png" alt="server1896"><br>并没有出现注册节点…网上好多博客里都是这样设置的，可能是因为我的版本太新了吧。</p><p>然后我试着把<code>register-with-eureka:</code>和<code>fetch-registry:</code> 都改为true，允许注册自己和接收注册，重新打包访问：</p><ul><li>1895节点<br><img src="../../../../images/server1895.png" alt="server1895"></li><li>1896节点<br><img src="../../../../images/server1896.png" alt="server1896"></li></ul><p>可以看到不仅客户端注册了，另一个注册中心注册了，连自己都注册了自己…而我们想达到的效果是除了自己之外注册，查了很久资料，都没有解决，暂时留个坑，期待工作中能解决吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringBoot集成eureka可以很容易的实现服务的注册管理，这是SpringCloud很重要的功能。通过一个demo记录一下配置的方式。SpringBoot版本1.5.6.RELEASE，SpringCloud版本Dalston.SR3.&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="eureka" scheme="http://yoursite.com/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>wait()和notify()方法的注释解读</title>
    <link href="http://yoursite.com/2017/04/29/Object%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/04/29/Object源码阅读笔记/</id>
    <published>2017-04-29T12:21:30.000Z</published>
    <updated>2017-12-24T14:13:59.595Z</updated>
    
    <content type="html"><![CDATA[<p>今天闲来看了看Object类的源码，发现注释里都是大神们满满的爱，比如wait()、notify()、notifyAll()的注释里详细的描述了方法的作用，用法，注意事项，甚至还列出了推荐书单。JDK开发人员写的注释，才是真正的一手资料吧哈哈。</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h4 id="wait-long-timeout"><a href="#wait-long-timeout" class="headerlink" title="wait(long timeout)"></a>wait(long timeout)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This method causes the current thread (call it &lt;var&gt;T&lt;/var&gt;) to</span></span><br><span class="line"><span class="comment">     * place itself in the wait set for this object and then to relinquish</span></span><br><span class="line"><span class="comment">     * any and all synchronization claims on this object. Thread &lt;var&gt;T&lt;/var&gt;</span></span><br><span class="line"><span class="comment">     * becomes disabled for thread scheduling purposes and lies dormant</span></span><br><span class="line"><span class="comment">     * until one of four things happens:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;                                                     </span></span><br><span class="line"><span class="comment">     * &lt;li&gt;Some other thread invokes the &#123;@code notify&#125; method for this              </span></span><br><span class="line"><span class="comment">     * object and thread &lt;var&gt;T&lt;/var&gt; happens to be arbitrarily chosen as</span></span><br><span class="line"><span class="comment">     * the thread to be awakened.</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;Some other thread invokes the &#123;@code notifyAll&#125; method for this      </span></span><br><span class="line"><span class="comment">     * object.</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;Some other thread &#123;@linkplain Thread#interrupt() interrupts&#125;            </span></span><br><span class="line"><span class="comment">     * thread &lt;var&gt;T&lt;/var&gt;.</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;The specified amount of real time has elapsed, more or less.  If     </span></span><br><span class="line"><span class="comment">     * &#123;@code timeout&#125; is zero, however, then real time is not taken into</span></span><br><span class="line"><span class="comment">     * consideration and the thread simply waits until notified.</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * A thread can also wake up without being notified, interrupted, or        </span></span><br><span class="line"><span class="comment">     * timing out, a so-called &lt;i&gt;spurious wakeup&lt;/i&gt;.  While this will rarely</span></span><br><span class="line"><span class="comment">     * occur in practice, applications must guard against it by testing for</span></span><br><span class="line"><span class="comment">     * the condition that should have caused the thread to be awakened, and</span></span><br><span class="line"><span class="comment">     * continuing to wait if the condition is not satisfied.  In other words,</span></span><br><span class="line"><span class="comment">     * waits should always occur in loops, like this one:</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *     synchronized (obj) &#123;</span></span><br><span class="line"><span class="comment">     *         while (&amp;lt;condition does not hold&amp;gt;)</span></span><br><span class="line"><span class="comment">     *             obj.wait(timeout);</span></span><br><span class="line"><span class="comment">     *         ... // Perform action appropriate to condition</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * (For more information on this topic, see Section 3.2.3 in Doug Lea's</span></span><br><span class="line"><span class="comment">     * "Concurrent Programming in Java (Second Edition)" (Addison-Wesley,</span></span><br><span class="line"><span class="comment">     * 2000), or Item 50 in Joshua Bloch's "Effective Java Programming      </span></span><br><span class="line"><span class="comment">     * Language Guide" (Addison-Wesley, 2001).</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure><ul><li><p>翻译一下：</p><pre><code>此方法导致当前同步的线程进入等待队列，并且释放锁，以下四种情况可以把线程移出等待队列：1. 其它线程调用notify()方法，刚好唤醒了它2. 其它线程调用了notifyAll()方法3. 其它线程调用Thread的interrupt()方法打断了休眠4. 到达wait(long time)设定的时间还有一种特殊情况，线程会因不知名的原因被唤醒，称为虚假唤醒，而且这种现象已经在实际环境中证实，因此，wait()一般要写在循环中使用，像这样： synchronized (obj) {      while (&lt;condition does not hold&gt;)          obj.wait(timeout);      ... // Perform action appropriate to condition  }如果要更清楚地搞懂这个问题，推荐两本书，Addison-Wesley出版的《Java并发编程》，Joshua Bloch编写的《Effective Java》第50条。</code></pre></li><li><p>编写JDK的前辈们已经把路都修好了，还在等什么，快把书从箱底里拿出来。</p></li></ul><h4 id="notify"><a href="#notify" class="headerlink" title="notify()"></a>notify()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Wakes up a single thread that is waiting on this object's</span></span><br><span class="line"><span class="comment">    * monitor. If any threads are waiting on this object, one of them</span></span><br><span class="line"><span class="comment">    * is chosen to be awakened. The choice is arbitrary and occurs at</span></span><br><span class="line"><span class="comment">    * the discretion of the implementation. A thread waits on an object's</span></span><br><span class="line"><span class="comment">    * monitor by calling one of the &#123;<span class="doctag">@code</span> wait&#125; methods.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * This method should only be called by a thread that is the owner</span></span><br><span class="line"><span class="comment">    * of this object's monitor. A thread becomes the owner of the</span></span><br><span class="line"><span class="comment">    * object's monitor in one of three ways:                       </span></span><br><span class="line"><span class="comment">    * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;By executing a synchronized instance method of that object.  </span></span><br><span class="line"><span class="comment">    * &lt;li&gt;By executing the body of a &#123;<span class="doctag">@code</span> synchronized&#125; statement    </span></span><br><span class="line"><span class="comment">    *     that synchronizes on the object.</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;For objects of type &#123;<span class="doctag">@code</span> Class,&#125; by executing a                      </span></span><br><span class="line"><span class="comment">    *     synchronized static method of that class.</span></span><br><span class="line"><span class="comment">    * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * Only one thread at a time can own an object's monitor.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>翻译：</p><pre><code>此方法随机唤醒等待队列中的一条线程，这个方法只能被占有锁的线程使用获得对象锁的几种方式：1. 执行一个对象的同步实例方法2. 利用同步代码块同步一个对象3. 对于类对象，执行类中的一个静态同步方法每次只能有一条线程占有对象的锁</code></pre></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>上面两个方法的注释中，已经说明了关于锁的基本性质，我写了一些测试，来证明这些方法的用法。</p><ul><li><p>测试 wait()，notify()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWaitNotify</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">//                myThread          main</span></span><br><span class="line">    </span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread(<span class="string">"myThread"</span>); </span><br><span class="line">                                <span class="comment">//创建线程myThread             新建态           运行态</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">synchronized</span> (myThread)&#123;    <span class="comment">//main获取 myThread对象的监听器(锁)</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">            </span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" start myThread"</span>);</span><br><span class="line">                myThread.start();   <span class="comment">//启动myThread             就绪态</span></span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" wait"</span>);</span><br><span class="line">                myThread.wait(); <span class="comment">//main主线程释放锁            运行态           阻塞态</span></span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" continue"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" get the monitor"</span>);</span><br><span class="line">            notify();                   <span class="comment">//myThread释放锁 解除main的阻塞状态                 </span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" over"</span>);</span><br><span class="line">        &#125;                                        <span class="comment">//             死亡态         就绪态</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">    main start myThread</span></span><br><span class="line"><span class="comment">    main wait</span></span><br><span class="line"><span class="comment">    myThread get the monitor</span></span><br><span class="line"><span class="comment">    myThread over</span></span><br><span class="line"><span class="comment">    main continue</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure></li><li><p>wait(long time)测试，这个测试使两个线程每隔三秒交替运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWait</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;                 </span><br><span class="line">        MyThread1 myThread = <span class="keyword">new</span> MyThread1(<span class="string">"myThread"</span>); </span><br><span class="line">        <span class="keyword">synchronized</span> (myThread)&#123;                           </span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                myThread.start();                           </span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" run"</span>);</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;       <span class="comment">//《Effective Java》中建议wait()方法在循环中使用</span></span><br><span class="line">                    myThread.wait(<span class="number">6000</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" run"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">MyThread1</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait(<span class="number">3000</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+ <span class="string">" run"</span>);</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                    wait(<span class="number">6000</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" run"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">    main run</span></span><br><span class="line"><span class="comment">    myThread run</span></span><br><span class="line"><span class="comment">    main run</span></span><br><span class="line"><span class="comment">    myThread run</span></span><br><span class="line"><span class="comment">    main run</span></span><br><span class="line"><span class="comment">    myThread run</span></span><br><span class="line"><span class="comment">    main run</span></span><br><span class="line"><span class="comment">    myThread run</span></span><br><span class="line"><span class="comment">    main run</span></span><br><span class="line"><span class="comment">    myThread run</span></span><br><span class="line"><span class="comment">    main run</span></span><br><span class="line"><span class="comment">    myThread run</span></span><br><span class="line"><span class="comment">    main run</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ····</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure></li><li><p>notifyAll()测试，这个测试证明了等待队列是一个类似于栈的数据结构，遵循后进先出原则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNotifyAll</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;  <span class="comment">//              自建线程                      main</span></span><br><span class="line">            <span class="keyword">new</span> MyThread(<span class="string">" "</span>+i).start(); <span class="comment">//         新建 就绪                      运行</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" sleep(3000)"</span>);</span><br><span class="line">                                            <span class="comment">//       运行 阻塞                   休眠</span></span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);             <span class="comment">// 为其它线程留运行时间</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(obj) &#123;  <span class="comment">//                      阻塞                       获取锁 运行</span></span><br><span class="line">            <span class="comment">// 主线程等待唤醒。</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" notifyAll()"</span>);</span><br><span class="line">            obj.notifyAll();      <span class="comment">//             唤醒 运行                      释放锁 死亡</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;      <span class="comment">//                      获取锁</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 打印输出结果</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" wait"</span>);</span><br><span class="line">                    <span class="comment">// 当前线程阻塞 释放锁资源</span></span><br><span class="line">                    obj.wait();</span><br><span class="line">                    <span class="comment">// 打印输出结果</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" run"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">     main sleep(3000)</span></span><br><span class="line"><span class="comment">    1 wait</span></span><br><span class="line"><span class="comment">    0 wait</span></span><br><span class="line"><span class="comment">    2 wait</span></span><br><span class="line"><span class="comment">    4 wait</span></span><br><span class="line"><span class="comment">    3 wait</span></span><br><span class="line"><span class="comment">    main notifyAll()</span></span><br><span class="line"><span class="comment">    3 run</span></span><br><span class="line"><span class="comment">    4 run</span></span><br><span class="line"><span class="comment">    2 run</span></span><br><span class="line"><span class="comment">    0 run</span></span><br><span class="line"><span class="comment">    1 run</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure></li><li><p>读源码和注释是个学习的好方法，路还很长，需要一点点积累</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天闲来看了看Object类的源码，发现注释里都是大神们满满的爱，比如wait()、notify()、notifyAll()的注释里详细的描述了方法的作用，用法，注意事项，甚至还列出了推荐书单。JDK开发人员写的注释，才是真正的一手资料吧哈哈。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合redis</title>
    <link href="http://yoursite.com/2017/03/15/SpringBoot-redis/"/>
    <id>http://yoursite.com/2017/03/15/SpringBoot-redis/</id>
    <published>2017-03-15T01:47:20.000Z</published>
    <updated>2017-12-24T14:13:59.596Z</updated>
    
    <content type="html"><![CDATA[<p>redis在系统架构中正在担任越来越重要的角色，由于其简单的集群配置，较为可靠的稳定性，还有快速的读取和插入性能，在系统中一般当作缓存或队列使用。SpringBoot中集成了jedis，能够方便的连接与操作redis，这里介绍一下具体的配置过程。</p><a id="more"></a><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置redis连接参数，启动redis，默认端口6379"><a href="#配置redis连接参数，启动redis，默认端口6379" class="headerlink" title="配置redis连接参数，启动redis，默认端口6379"></a>配置redis连接参数，启动redis，默认端口6379</h4><p>在application.yml中配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    pool:</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">    password:</span></span><br></pre></td></tr></table></figure></p><h4 id="配置需要用到的Bean"><a href="#配置需要用到的Bean" class="headerlink" title="配置需要用到的Bean"></a>配置需要用到的Bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> JdkSerializationRedisSerializer());</span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashValueSerializer(<span class="keyword">new</span> JdkSerializationRedisSerializer());</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueOperations&lt;String, Object&gt; <span class="title">valueOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListOperations&lt;String, Object&gt; <span class="title">listOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SetOperations&lt;String, Object&gt; <span class="title">setOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashOperations&lt;String, String, Object&gt; <span class="title">hashOprations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZSetOperations&lt;String, Object&gt; <span class="title">zstOprations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里说明一下各个实例的作用：</p><p>1.<code>RedisTemplate</code>是最重要的一个实例，其他具体操作的实例都来自于它。构造<code>RedisTemplate</code>时需要传入<code>RedisConnectionFactory</code>的实例，其中存储了redis连接的信息，而且SpringBoot已经帮我们实例化好了，直接用就可以。而且在装配时，方法参数可以直接引用装配好的实例（ByType方式），不需要使用@Autowired来引入。还需要设置<code>RedisTemplate</code>的键和值的序列化反序列化方式。这里采用JDK的序列化方式。</p><p>2.剩余实例的作用：<br><code>ValueOperations</code>:操作String数据类型<br><code>ListOperations</code>:操作list<br><code>SetOperations</code>:操作Set<br><code>HashOperations</code>:操作hash数据类型<br><code>ZSetOperations</code>:操作SortedSet有序集合</p><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ValueOperations&lt;String, Object&gt; valueOperations;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ListOperations&lt;String, Object&gt; listOperations;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">SetOperations&lt;String, Object&gt; setOperations;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">HashOperations&lt;String, String, Object&gt; hashOprations;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ZSetOperations&lt;String, Object&gt; zSetOperations;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="number">0</span>,<span class="string">"小白"</span>);</span><br><span class="line"></span><br><span class="line">valueOperations.set(<span class="string">"小红"</span>,<span class="string">"18"</span>);</span><br><span class="line"></span><br><span class="line">valueOperations.set(user.getId().toString(),user);</span><br><span class="line"></span><br><span class="line">Assert.assertEquals(<span class="string">"18"</span>,valueOperations.get(<span class="string">"小红"</span>));</span><br><span class="line">Assert.assertEquals(user,valueOperations.get(<span class="string">"0"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User user1 = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"小李"</span>);</span><br><span class="line"></span><br><span class="line">listOperations.leftPush(<span class="string">"users"</span>,user);</span><br><span class="line"></span><br><span class="line">listOperations.leftPush(<span class="string">"users"</span>,user1);</span><br><span class="line"></span><br><span class="line">Assert.assertEquals(user,listOperations.rightPop(<span class="string">"users"</span>));</span><br><span class="line">Assert.assertEquals(user1,listOperations.rightPop(<span class="string">"users"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setOperations.add(<span class="string">"users"</span>, user);</span><br><span class="line">setOperations.add(<span class="string">"users"</span>, user1);</span><br><span class="line">setOperations.add(<span class="string">"users"</span>, user);</span><br><span class="line">System.out.println(setOperations.members(<span class="string">"users"</span>));</span><br><span class="line">redisTemplate.delete(<span class="string">"users"</span>);</span><br><span class="line"></span><br><span class="line">zSetOperations.add(<span class="string">"users"</span>,user,<span class="number">90.0</span>);</span><br><span class="line">zSetOperations.add(<span class="string">"users"</span>,user1,<span class="number">80.0</span>);</span><br><span class="line">        System.out.println(zSetOperations.range(<span class="string">"users"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">        redisTemplate.delete(<span class="string">"users"</span>);</span><br><span class="line"></span><br><span class="line">        hashOprations.put(<span class="string">"users"</span>,user.getId().toString(),user);</span><br><span class="line">        hashOprations.put(<span class="string">"users"</span>,user1.getId().toString(),user1);</span><br><span class="line">        Assert.assertEquals(user,hashOprations.get(<span class="string">"users"</span>,user.getId().toString()));</span><br><span class="line">        Assert.assertEquals(user1,hashOprations.get(<span class="string">"users"</span>,user1.getId().toString()));</span><br><span class="line">        redisTemplate.delete(<span class="string">"users"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里仅仅做了简单的插入和删除操作，更多的命令还需以后补充。我用断言进行了测试。需要注意，<code>redisTemplate</code>能够进行针对全局的操作，比如hasKey()判断键值是否存在，delete()删除一个键，expire()为一个键设置过期时间。<br>还发现一个问题就是如果一个键已经存在比如<code>&quot;users&quot;</code>,如果创建一个数据类型不同的<code>&quot;users&quot;</code>，那么会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WRONGTYPE Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure></p><p>这个在生产中必须注意。<br>有一个查询redis命令的地址，在此记录一下：<a href="http://doc.redisfans.com/" target="_blank" rel="noopener">http://doc.redisfans.com/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis在系统架构中正在担任越来越重要的角色，由于其简单的集群配置，较为可靠的稳定性，还有快速的读取和插入性能，在系统中一般当作缓存或队列使用。SpringBoot中集成了jedis，能够方便的连接与操作redis，这里介绍一下具体的配置过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>next主题打赏文字改成汉字&amp;页面底部总字数添加汉字</title>
    <link href="http://yoursite.com/2017/02/28/next%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2017/02/28/next打赏功能/</id>
    <published>2017-02-28T09:50:33.000Z</published>
    <updated>2017-12-24T14:13:59.596Z</updated>
    
    <content type="html"><![CDATA[<h4 id="打赏文字修改"><a href="#打赏文字修改" class="headerlink" title="打赏文字修改"></a>打赏文字修改</h4><p>我在按照[官网的方法][1]在next主题下加了打赏功能，但是文字都是英文，在我Ctrl+F了多个文件后终于找到修改的地方，记录一下：</p><a id="more"></a><p>打开文件<code>themes\next\layout\_macro\reward.swig</code>，修改<code>赏，微信打赏，支付宝打赏</code>等地方(下面是我改过的，原来是英文)，效果就是你现在看到的这样了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding: 10px 0; margin: 20px auto; width: 90%; text-align: center;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; theme.reward_comment &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"rewardButton"</span> <span class="attr">disable</span>=<span class="string">"enable"</span> <span class="attr">onclick</span>=<span class="string">"var qr = document.getElementById('QR'); if (qr.style.display === 'none') &#123;qr.style.display='block';&#125; else &#123;qr.style.display='none'&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>赏<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"QR"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% if theme.wechatpay %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wechat"</span> <span class="attr">style</span>=<span class="string">"display: inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"wechat_qr"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; theme.wechatpay &#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">"&#123;&#123; theme.author &#125;&#125; WeChat Pay"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>微信打赏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if theme.alipay %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"alipay"</span> <span class="attr">style</span>=<span class="string">"display: inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"alipay_qr"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; theme.alipay &#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">"&#123;&#123; theme.author &#125;&#125; Alipay"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>支付宝打赏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if theme.bitcoin %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bitcoin"</span> <span class="attr">style</span>=<span class="string">"display: inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"bitcoin_qr"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; theme.bitcoin &#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">"&#123;&#123; theme.author &#125;&#125; Bitcoin"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Bitcoin<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="字数统计添加文字"><a href="#字数统计添加文字" class="headerlink" title="字数统计添加文字"></a>字数统计添加文字</h4><p>此外还有个相同的问题，网站底部总字数统计没有汉字，只有数字，这个要修改<code>\themes\next\layout\_partials\footer.swig</code>文件：</p><p>在totalcount(site, ‘0,0.0a’)前后加相应的汉字即可。<br>  [1]: <a href="http://theme-next.iissnan.com/theme-settings.html#reward" target="_blank" rel="noopener">http://theme-next.iissnan.com/theme-settings.html#reward</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;打赏文字修改&quot;&gt;&lt;a href=&quot;#打赏文字修改&quot; class=&quot;headerlink&quot; title=&quot;打赏文字修改&quot;&gt;&lt;/a&gt;打赏文字修改&lt;/h4&gt;&lt;p&gt;我在按照[官网的方法][1]在next主题下加了打赏功能，但是文字都是英文，在我Ctrl+F了多个文件后终于找到修改的地方，记录一下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合WebSocket</title>
    <link href="http://yoursite.com/2016/11/08/SpringBoot-webSocket/"/>
    <id>http://yoursite.com/2016/11/08/SpringBoot-webSocket/</id>
    <published>2016-11-08T11:35:10.000Z</published>
    <updated>2017-12-24T14:13:59.596Z</updated>
    
    <content type="html"><![CDATA[<p>最近的需求需要用到WebSocket建立长连接，所以研究记录下。<br>1.首先引入WebSocket依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>2.发布WebSocket终端后缀<code>/endpointSang</code>和代理注册路径<code>/topic</code>，需要一个配置类WebSocketConfig继承AbstractWebSocketMessageBrokerConfigurer，注意加上@Configuration和@EnableWebSocketMessageBroker注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">extends</span> <span class="title">AbstractWebSocketMessageBrokerConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry stompEndpointRegistry)</span> </span>&#123;</span><br><span class="line">        stompEndpointRegistry.addEndpoint(<span class="string">"/endpointSang"</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.enableSimpleBroker(<span class="string">"/topic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.声明WebSocket控制器， <code>@MessageMapping</code>接收请求，<code>@SendTo</code>响应请求，括号中是接收和响应的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WebSocketController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@SendTo</span>(<span class="string">"/topic/getResponse"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">push</span><span class="params">(String pop)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"=============&gt;"</span>+pop+<span class="string">"&lt;============="</span>);</span><br><span class="line">        <span class="keyword">return</span> pop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.前台除了jQuery还需要引入两个js库，<a href="../../../../js/sockjs.min.js">sockjs.min.js</a>和<a href="../../../../js/stomp.js">stomp.js</a>.整个通信过程依赖一个SocketJs对象，一个由socket生成的stomClient对象。先通过SocketJs订阅终端，然后通过stomClient获得连接，通过其subscribe()方法中的回调函数接收响应，通过send()方法发送消息。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>广播式WebSocket<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;js/sockjs.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;js/stomp.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-1.11.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"disconnect()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"color: #e80b0a;"</span>&gt;</span>Sorry，浏览器不支持WebSocket<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"connect"</span> <span class="attr">onclick</span>=<span class="string">"connect();"</span>&gt;</span>连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"disconnect"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span> <span class="attr">onclick</span>=<span class="string">"disconnect();"</span>&gt;</span>断开连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"conversationDiv"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>输入些东西<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sendName"</span> <span class="attr">onclick</span>=<span class="string">"sendName();"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"response"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var stompClient = null;</span></span><br><span class="line"><span class="undefined">    function setConnected(connected) &#123;</span></span><br><span class="line"><span class="undefined">        document.getElementById("connect").disabled = connected;</span></span><br><span class="line"><span class="undefined">        document.getElementById("disconnect").disabled = !connected;</span></span><br><span class="line"><span class="undefined">        document.getElementById("conversationDiv").style.visibility = connected ? 'visible' : 'hidden';</span></span><br><span class="line"><span class="undefined">//        $("#connect").disabled = connected;</span></span><br><span class="line"><span class="undefined">//        $("#disconnect").disabled = !connected;</span></span><br><span class="line"><span class="undefined">        $("#response").html();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    function connect() &#123;</span></span><br><span class="line"><span class="undefined">        var socket = new SockJS('/demo/endpointSang');</span></span><br><span class="line"><span class="undefined">        stompClient = Stomp.over(socket);</span></span><br><span class="line"><span class="undefined">        stompClient.connect(&#123;&#125;, function (frame) &#123;</span></span><br><span class="line"><span class="undefined">            setConnected(true);</span></span><br><span class="line"><span class="undefined">            console.log('Connected:' + frame);</span></span><br><span class="line"><span class="undefined">            stompClient.subscribe('/topic/getResponse', function (response) &#123;</span></span><br><span class="line"><span class="undefined">                showResponse(response.body);</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    function disconnect() &#123;</span></span><br><span class="line"><span class="undefined">        if (stompClient != null) &#123;</span></span><br><span class="line"><span class="undefined">            stompClient.disconnect();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        setConnected(false);</span></span><br><span class="line"><span class="undefined">        console.log('Disconnected');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    function sendName() &#123;</span></span><br><span class="line"><span class="undefined">        var name = $('#name').val();</span></span><br><span class="line"><span class="undefined">        console.log('name:' + name);</span></span><br><span class="line"><span class="undefined">        stompClient.send("/hello", &#123;&#125;,  name);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    function showResponse(message) &#123;</span></span><br><span class="line"><span class="undefined">        $("#response").html(message);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这个地方遇到一个坑，刚开始当创建连接时，总是404：<code>http://localhost:8082/endpointSang/info [HTTP/1.1 404 ]</code>，我百思不得其解，哪里跑出来的<code>/info</code>？，后来我想了一下，发现我配置了项目后缀<code>/demo</code>，<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">  context-path:</span> <span class="string">/demo</span></span><br></pre></td></tr></table></figure></p><p>那么完整的路径应该是<code>http://localhost:8082/demo/endpointSang/info</code>，所以我试着把<code>new SockJS(&#39;/endpointSang&#39;)</code>中的路径换成了<code>http://localhost:8082/demo/endpointSang</code>，果然好了。后来又换成<code>/demo/endpointSang</code>也是可以的。但是为什么后面发送接收消息的时候不需要加前缀呢，可能是SocketJs类库默认从项目根路径<code>/</code>为起点访问吧。</p><p>5.测试结果<br><img src="../../../../images/webSocketTest1.png" alt="连接前"><br><img src="../../../../images/webSocketTest2.png" alt="连接"><br><img src="../../../../images/webSocketTest3.png" alt="发送消息"></p><ul><li>在测试中是在一个页面上，发送和接收消息，实际上WebSocket是为了解决双向通信而提出的协议，支持跨域，因此可以在不同页面上得到相应，只要页面上通过终端获取了长连接。但是随之而来的是如何保证安全的问题。这个问题今后慢慢研究。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的需求需要用到WebSocket建立长连接，所以研究记录下。&lt;br&gt;1.首先引入WebSocket依赖&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-websocket&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>理解数据库事务</title>
    <link href="http://yoursite.com/2016/10/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2016/10/07/数据库事务/</id>
    <published>2016-10-07T02:28:40.000Z</published>
    <updated>2017-12-24T14:13:59.597Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h3><ul><li>事务是原子性的，在执行一条或多条的语句组合时，要么全部执行，要么都不执行</li><li>默认情况下一条语句: SELECT, UPDATE, DELETE, INSERT就是一个事务。</li><li>若要把几条SQL语句当作一个事务的整体，可以使用一系列的T_SQL语句：BEGIN, COMMIT, ROLLBACK, SAVE</li></ul><a id="more"></a><h4 id="BEGIN-TRAN-语句"><a href="#BEGIN-TRAN-语句" class="headerlink" title="BEGIN TRAN 语句"></a>BEGIN TRAN 语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRAN [&lt;transaction_name&gt; | &lt;@transaction_variable&gt;]    <span class="comment">-- 若要标记事务则必须指明事务名称 </span></span><br><span class="line">[<span class="keyword">WITH</span> MARK [<span class="string">'&lt;description&gt;'</span>]] [;]                            <span class="comment">-- 事务描述，可有可无，不超过255字节</span></span><br></pre></td></tr></table></figure><blockquote><p>标记事务：在需要时将数据库还原到某个时间点上</p><ul><li>发生重要操作时做标记，以便在需要的时候可以恢复到这个点</li><li>标记两个数据库的行为，以便数据库还原到同步的数据点</li></ul></blockquote><h4 id="COMMIT-TRAN-语句"><a href="#COMMIT-TRAN-语句" class="headerlink" title="COMMIT TRAN 语句"></a>COMMIT TRAN 语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span> TRAN [&lt;transaction_name&gt; | &lt;transaction_variable&gt;] [;]</span><br></pre></td></tr></table></figure><h4 id="ROLLBACK-TRAN"><a href="#ROLLBACK-TRAN" class="headerlink" title="ROLLBACK TRAN"></a>ROLLBACK TRAN</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span> TRAN [&lt;transaction_name&gt; | &lt;<span class="keyword">save</span> point <span class="keyword">name</span>&gt; | &lt;@transaction_variable&gt; | &lt;@<span class="keyword">savepoint</span> <span class="keyword">variable</span>&gt;] </span><br><span class="line"><span class="comment">--使事务回到起点，若指明了事务名或者保存点，则回到指定的起点或保存点</span></span><br></pre></td></tr></table></figure><h4 id="SAVE-TRAN"><a href="#SAVE-TRAN" class="headerlink" title="SAVE TRAN"></a>SAVE TRAN</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAVE TRAN [&lt;save point name&gt; | &lt;@savepoint variable&gt;] [;]</span><br></pre></td></tr></table></figure><ul><li>保存点用来将事务回滚到某一时间点</li><li>无论之前有多少个保存点，ROLLBACK回到某个保存点之后，这些保存点都会失效</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据库事务&quot;&gt;&lt;a href=&quot;#数据库事务&quot; class=&quot;headerlink&quot; title=&quot;数据库事务&quot;&gt;&lt;/a&gt;数据库事务&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;事务是原子性的，在执行一条或多条的语句组合时，要么全部执行，要么都不执行&lt;/li&gt;
&lt;li&gt;默认情况下一条语句: SELECT, UPDATE, DELETE, INSERT就是一个事务。&lt;/li&gt;
&lt;li&gt;若要把几条SQL语句当作一个事务的整体，可以使用一系列的T_SQL语句：BEGIN, COMMIT, ROLLBACK, SAVE&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="sqlserver" scheme="http://yoursite.com/tags/sqlserver/"/>
    
      <category term="事务" scheme="http://yoursite.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot多环境配置及参数启动</title>
    <link href="http://yoursite.com/2016/09/22/SpringBoot-profilesConfig/"/>
    <id>http://yoursite.com/2016/09/22/SpringBoot-profilesConfig/</id>
    <published>2016-09-22T01:05:40.000Z</published>
    <updated>2017-12-24T14:13:59.596Z</updated>
    
    <content type="html"><![CDATA[<p>使用SpringBoot开发能够极大的简化配置文件，在配置不同环境时只需要一个文件即可，以下是配置文件：</p><a id="more"></a><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line">    <span class="comment">#  hibernate.hbm2ddl.auto: create</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9999</span></span><br></pre></td></tr></table></figure><p>有几点要特别注意：</p><ol><li>不同环境的配置间用<code>---</code>隔开，起到分隔作用域的效果，否则会互相冲突</li><li>在主配置项spring.profiles.active：后写定义的不同配置名，如dev、prod，冒号后有一个空格</li></ol><h4 id="同时启动多个环境"><a href="#同时启动多个环境" class="headerlink" title="同时启动多个环境"></a>同时启动多个环境</h4><p>如果要同时启动多个环境，可以使用命令行的方式；<br>首先需要用MAVEN打包，在项目根目录下运行：<code>maven clean package</code>；<br>然后进入到target文件夹，启动项目<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ***.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure></p><p>这样启动开发环境，同理可以启动生产环境；<br>也可以传递多个参数，像这样：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ***.jar --spring.profiles.active=prod --server.port=<span class="number">9090</span></span><br></pre></td></tr></table></figure></p><p>SpringBoot是如何实现这样灵活的启动方式的呢，我们看一下SpringBoot的启动类里的main方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DemoNewApplication.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到SpringBoot将命令行中的参数先传到main主方法，再传入了run()方法，然后去设置启动参数，是不是很简单。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用SpringBoot开发能够极大的简化配置文件，在配置不同环境时只需要一个文件即可，以下是配置文件：&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Git checkout 用法</title>
    <link href="http://yoursite.com/2016/09/18/Git-checkout/"/>
    <id>http://yoursite.com/2016/09/18/Git-checkout/</id>
    <published>2016-09-18T10:38:05.000Z</published>
    <updated>2017-12-24T14:13:59.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="check-out"><a href="#check-out" class="headerlink" title="check out"></a>check out</h3><h4 id="1-git-checkout-q-lt-commit-gt-–-lt-paths-gt-…"><a href="#1-git-checkout-q-lt-commit-gt-–-lt-paths-gt-…" class="headerlink" title="1. git checkout [-q] [&lt;commit&gt;] [–] &lt;paths&gt;…"></a>1. git checkout [-q] [&lt;commit&gt;] [–] &lt;paths&gt;…</h4><ul><li>有commit(提交版本号):用版本库中对应版本文件覆盖暂存区和工作区文件<br> <code>$ git checkout 0w3f...(版本号) -- filename</code></li></ul><a id="more"></a><ul><li>无commit(提交版本号)：用暂存区对应版本文件覆盖工作区文件<br><code>$ git checkout -- filename</code><br><code>$ git checkout .</code> :　用暂存区文件覆盖工作区所有修改</li></ul><h4 id="2-git-checkout-lt-branch-gt"><a href="#2-git-checkout-lt-branch-gt" class="headerlink" title="2. git checkout [&lt;branch&gt;]"></a>2. git checkout [&lt;branch&gt;]</h4><ul><li>省略branch:检查工作区，暂存区，HEAD间的差别</li><li>有branch:检出branch分支，分三步：将HEAD指向branch分支，然后将HEAD对应版本文件覆盖到工作区和暂存区<br><code>$ git checkout branch</code> –filename:这种情况不会改变HEAD指向，只会把branch中对应文件覆盖到工作区和暂存区</li></ul><h4 id="3-git-checkout-m-b-–orphan-lt-new-branch-gt-lt-start-point-gt"><a href="#3-git-checkout-m-b-–orphan-lt-new-branch-gt-lt-start-point-gt" class="headerlink" title="3. git checkout [-m] [[-b]–orphan] &lt;new_branch&gt;] [&lt;start_point&gt;]"></a>3. git checkout [-m] [[-b]–orphan] &lt;new_branch&gt;] [&lt;start_point&gt;]</h4><ul><li>创建和切换到新的分支（&lt;new_branch&gt;），新的分支从&lt;start_point&gt;指定的提交开始创建</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;check-out&quot;&gt;&lt;a href=&quot;#check-out&quot; class=&quot;headerlink&quot; title=&quot;check out&quot;&gt;&lt;/a&gt;check out&lt;/h3&gt;&lt;h4 id=&quot;1-git-checkout-q-lt-commit-gt-–-lt-paths-gt-…&quot;&gt;&lt;a href=&quot;#1-git-checkout-q-lt-commit-gt-–-lt-paths-gt-…&quot; class=&quot;headerlink&quot; title=&quot;1. git checkout [-q] [&amp;lt;commit&amp;gt;] [–] &amp;lt;paths&amp;gt;…&quot;&gt;&lt;/a&gt;1. git checkout [-q] [&amp;lt;commit&amp;gt;] [–] &amp;lt;paths&amp;gt;…&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;有commit(提交版本号):用版本库中对应版本文件覆盖暂存区和工作区文件&lt;br&gt; &lt;code&gt;$ git checkout 0w3f...(版本号) -- filename&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>关于Java自动拆箱装箱的思考</title>
    <link href="http://yoursite.com/2016/09/02/%E8%87%AA%E5%8A%A8%E6%8B%86%E8%A3%85%E7%AE%B1/"/>
    <id>http://yoursite.com/2016/09/02/自动拆装箱/</id>
    <published>2016-09-02T07:08:32.000Z</published>
    <updated>2017-12-24T14:13:59.597Z</updated>
    
    <content type="html"><![CDATA[<p>事情起源于这样一道面试题目：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">127</span>;</span><br><span class="line">        Integer b = <span class="number">127</span>; </span><br><span class="line">        Integer c = <span class="number">127</span>;</span><br><span class="line">        Integer d = <span class="number">128</span>;</span><br><span class="line">        Integer e = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(a == b); <span class="comment">//true</span></span><br><span class="line">        System.out.println(b == c); <span class="comment">//true </span></span><br><span class="line">        System.out.println(d == e); <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>初看到答案还是有些奇怪，通过网上查资料，看源码和《Effective Java》，清楚了其中原因。</p><h4 id="拆装箱概念"><a href="#拆装箱概念" class="headerlink" title="拆装箱概念"></a>拆装箱概念</h4><ul><li>拆箱 Integer -&gt; int，调用intValue()方法，转换为int</li><li>装箱 int -&gt; Integer，调用Integer.valueOf()转换为Integer对象</li></ul><p>Java在JDK1.5 加入自动拆装箱，是参照C#（互相借鉴嘛，可以理解）做的，那为什么需要拆装箱呢，有以下几个原因：</p><ol><li>Java是面向对象的</li><li>包装类中提供了实用的方法，如valueOf(String s), parseInt(String s), toString()等</li><li>方便在集合中存储，泛型只能是引用类型，如List<integer>正确，List<int>错误。List、Set中add方法只能接收对象，当添加基本类型数据时，会自动装箱。这是由于Java用泛型擦除方式实现泛型的后果，这也是Java一直被吐槽的一个原因。 </int></integer></li></ol><h4 id="自动拆装箱的实现"><a href="#自动拆装箱的实现" class="headerlink" title="自动拆装箱的实现"></a>自动拆装箱的实现</h4><p>1.valueOf()方法，以Integer b = 127方式给一个Integer变量赋值，会调用此方法。可以看到先对int值进行了一次判断，这里用到了静态内部类IntegerCache的两个常量，low = -128，high = 127.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.静态内部类IntegerCache其常量cache[]作为常量池缓存了-128~127的Integer对象，integerCacheHighPropValue这个参数为null, 除非在启动参数里设置。现在就可以解释题目里的情况了，a与b比较时，b进行了自动拆箱，两个基本类型比较，只比较大小，所以为true；b与c比较，由于两个数在-128~127之间，所以指向同一个对象，因此==比较相等；而d与e大于这个范围，因此会创建两个不同的对象，比较时自然返回false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">         <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>); </span><br><span class="line">        <span class="comment">//Begin</span></span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//End 这段代码不会运行</span></span><br><span class="line">        high = h;</span><br><span class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> j = low;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.总结<br>    Integer a = i;<br>    当-128 &lt;= i &lt;= 127, 相当于 Integer a = Integer.IntegerCache.cache[i + 128];<br>    当 i &lt; -128 || i &gt; 127, 相当于 Integer a = new Integer(i)<br>    在《Effective Java》中举了这样一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Long sum = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>乍看起来没有什么问题，但是这个程序中进行了多达2^31-1次拆装箱；严重影响了性能。<br>也千万不要在业务代码里写这种代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">1</span>; <span class="comment">//-128~127都一样</span></span><br><span class="line"><span class="keyword">synchronized</span>(i)&#123;</span><br><span class="line">    <span class="comment">//your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样会把所有的线程全部同步到一个对象上，后果可想而知…<br>只能感慨Java是一门充满设计的语言，到处都是坑啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事情起源于这样一道面试题目：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;127&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Integer b = &lt;span class=&quot;number&quot;&gt;127&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Integer c = &lt;span class=&quot;number&quot;&gt;127&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Integer d = &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Integer e = &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(a == b); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(b == c); &lt;span class=&quot;comment&quot;&gt;//true &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(d == e); &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>存储过程返回值--SQL Server</title>
    <link href="http://yoursite.com/2016/08/02/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    <id>http://yoursite.com/2016/08/02/存储过程返回值/</id>
    <published>2016-08-02T07:08:32.000Z</published>
    <updated>2017-12-24T14:13:59.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="存储过程的三种返回方式"><a href="#存储过程的三种返回方式" class="headerlink" title="存储过程的三种返回方式"></a>存储过程的三种返回方式</h2><p>记录一下存储过程返回值种类及其接收方式</p><a id="more"></a><h3 id="声明output参数"><a href="#声明output参数" class="headerlink" title="声明output参数"></a>声明output参数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proc get_output(</span><br><span class="line">    @<span class="keyword">id</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    @<span class="keyword">result</span> <span class="built_in">int</span> <span class="keyword">output</span></span><br><span class="line">) </span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> @<span class="keyword">result</span> = age <span class="keyword">from</span> t_student  <span class="keyword">where</span> <span class="keyword">id</span> = @<span class="keyword">id</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> @arg <span class="built_in">int</span></span><br><span class="line">exec get_output <span class="string">'111'</span>, @arg <span class="keyword">output</span></span><br></pre></td></tr></table></figure><h3 id="return-返回"><a href="#return-返回" class="headerlink" title="return 返回"></a>return 返回</h3><p>只能返回int类型,可以直接写成return select age from t_student  where id = @id; 若成功返回0, 失败返回非零正数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proc get_output(</span><br><span class="line">    @<span class="keyword">id</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line"></span><br><span class="line">) </span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">result</span> <span class="built_in">int</span></span><br><span class="line">    <span class="keyword">select</span> @<span class="keyword">result</span> = age <span class="keyword">from</span> t_student  <span class="keyword">where</span> <span class="keyword">id</span> = @<span class="keyword">id</span></span><br><span class="line">    <span class="keyword">return</span> @<span class="keyword">result</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> @arg <span class="built_in">int</span></span><br><span class="line">exec @arg = get_output <span class="string">'111'</span></span><br></pre></td></tr></table></figure><h3 id="返回表结果集"><a href="#返回表结果集" class="headerlink" title="返回表结果集"></a>返回表结果集</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proc get_output(</span><br><span class="line">    @<span class="keyword">id</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">) </span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> t_student  <span class="keyword">where</span> <span class="keyword">id</span> = @<span class="keyword">id</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">select</span> top <span class="number">0</span> * <span class="keyword">into</span> #temp <span class="keyword">from</span> t_student</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> #temp exec get_output <span class="string">'111'</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>  #temp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;存储过程的三种返回方式&quot;&gt;&lt;a href=&quot;#存储过程的三种返回方式&quot; class=&quot;headerlink&quot; title=&quot;存储过程的三种返回方式&quot;&gt;&lt;/a&gt;存储过程的三种返回方式&lt;/h2&gt;&lt;p&gt;记录一下存储过程返回值种类及其接收方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="存储过程" scheme="http://yoursite.com/tags/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
      <category term="sqlserver" scheme="http://yoursite.com/tags/sqlserver/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2016/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/07/22/我的第一篇博客/</id>
    <published>2016-07-22T07:08:32.000Z</published>
    <updated>2018-09-20T11:14:20.795Z</updated>
    
    <content type="html"><![CDATA[<p>感谢Hexo让每个人拥有自己的博客，下面就简单介绍一下用Hexo搭建个人博客的方法，我只在Windows搭建过，以下方法仅适用于Windows.</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>下载地址： <a href="https://git-scm.com/download" target="_blank" rel="noopener">Git下载</a></p><p>选择你系统对应的版本下载即可，比如我下载了Windows版本。</p><p>安装过程傻瓜式下一步即可，如果不想安装在C盘，可以修改一下盘符。</p><h3 id="注册GitHub账户"><a href="#注册GitHub账户" class="headerlink" title="注册GitHub账户"></a>注册GitHub账户</h3><ol><li><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub: 官网</a>，注册的过程不多说了，注意起一个优雅的用户名，将来会作为访问的地址。</p></li><li><p>添加SSH Key，在桌面右键选择GitBash，输入以下命令</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure><p>后面会提示输入文件名和密码，推荐直接回车使用默认</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.</span><br><span class="line"><span class="comment"># Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</span></span><br><span class="line"><span class="comment"># The key fingerprint is:</span></span><br><span class="line"><span class="comment"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span></span><br></pre></td></tr></table></figure><p>看到类似上面的代码，说明SSHKey创建成功，用文本编辑器打开文件id_rsa.pub，复制内容，或者使用命令行 复制</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>登陆申请的GitHub账号，从右上角的设置（ Account Settings ）进入，然后点击菜单栏的 SSH key         进入页面，点击Add SSH key将刚才复制的内容粘贴到输入框中，添加 SSH key。</p></li><li><p>测试SSH Key</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>出现以下代码</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string"># Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></li><li><p>输入yes回车</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'/c/Users/Administrator/.ssh/id_rsa'</span>:</span><br></pre></td></tr></table></figure></li><li><p>提示输入密码，如果第二步没有设置，直接回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not</span></span><br><span class="line"><span class="string">  # provide shell access.</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- 如果看到上面的内容，用户名正确的话，说明添加成功</span><br><span class="line"></span><br><span class="line">### 安装node.js</span><br><span class="line"></span><br><span class="line">下载地址： [nodejs下载](http://nodejs.cn/download/)</span><br><span class="line"></span><br><span class="line">安装步骤同上，就不重复了。</span><br><span class="line"></span><br><span class="line">## 发布博客</span><br><span class="line"></span><br><span class="line">### 安装Hexo</span><br><span class="line"></span><br><span class="line">安装Hexo需要用到GitBash命令行，但是很简单，严格按照下面的步骤来就可以了。</span><br><span class="line"></span><br><span class="line"> - 找一个盘，最好不在C盘下，建立一个空文件夹，例如/blog;</span><br><span class="line"> - 进入文件夹，右键，可以看到两个Git图标，点击GitBash打开Bash命令行工具；</span><br><span class="line"> - 依次输入以下命令；</span><br><span class="line"> </span><br><span class="line">    ``` bash</span><br><span class="line">    $ npm --registry https://registry.npm.taobao.org</span><br><span class="line">    $ npm install -g hexo-cli</span><br><span class="line">    $ hexo init #初始化blog目录</span><br><span class="line">    $ npm install</span><br><span class="line">    $ hexo g    #生成静态文件</span><br><span class="line">    $ hexo s    #启动本地服务</span><br></pre></td></tr></table></figure><p>确保一条命令执行成功后再执行下一条</p><ul><li>如果没有报错，现在打开浏览器访问<code>http://localhost:4000/</code>就能看到本机内置的博客界面了；</li><li><p>按Ctrl+C，关闭服务, clean清除生成的静态文件；</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean    <span class="comment">#清除静态文件</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>接下来就可以通过github来发布自己的博客了~</p><ul><li><p>依然在命令行下，安装发布用的编译工具</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，打开根目录下的_config.yml文件，修改如下内容</p><pre><code>deploy:    type: git    repo: https://github.com/lmintlcx/lmintlcx.github.io.git  #先前设置的仓库    branch: master</code></pre></li><li><p>执行编译和发布命令（每次发布都需要clean和generate）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li><p>访问<br>  地址是<code>https://username.github.io</code>，实际就是你的github仓库名</p></li></ul><p>到这里，你就发布自己的博客了，虽然有些繁琐，但是搭建好之后，后续的发布和更新操作都很简单。如果要发文章，只要在/source文件夹下添加MarkDown文件再编译发布即可。当然还有一些细节的修改，比如主题，头像，用户名之类的，还需要好好研究，之后会有补充。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感谢Hexo让每个人拥有自己的博客，下面就简单介绍一下用Hexo搭建个人博客的方法，我只在Windows搭建过，以下方法仅适用于Windows.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
