// Generated by CoffeeScript 1.7.1

/*
 Stomp Over WebSocket http://www.jmesnil.net/stomp-websocket/doc/ | Apache License V2.0

 Copyright (C) 2010-2013 [Jeff Mesnil](http://jmesnil.net/)
 Copyright (C) 2012 [FuseSource, Inc.](http://fusesource.com)
 */

(function() {
    var Byte, Client, Frame, Stomp,
        __hasProp = {}.hasOwnProperty,
        __slice = [].slice;

    Byte = {
        LF: '\x0A',
        NULL: '\x00'
    };

    Frame = (function() {
        var unmarshallSingle;

        function Frame(command, headers, body) {
            this.command = command;
            this.headers = headers != null ? headers : {};
            this.body = body != null ? body : '';
        }

        Frame.prototype.toString = function() {
            var lines, name, skipContentLength, value, _ref;
            lines = [this.command];
            skipContentLength = this.headers['content-length'] === false ? true : false;
            if (skipContentLength) {
                delete this.headers['content-length'];
            }
            _ref = this.headers;
            for (name in _ref) {
                if (!__hasProp.call(_ref, name)) continue;
                value = _ref[name];
                lines.push("" + name + ":" + value);
            }
            if (this.body && !skipContentLength) {
                lines.push("content-length:" + (Frame.sizeOfUTF8(this.body)));
            }
            lines.push(Byte.LF + this.body);
            return lines.join(Byte.LF);
        };

        Frame.sizeOfUTF8 = function(s) {
            if (s) {
                return encodeURI(s).match(/%..|./g).length;
            } else {
                return 0;
            }
        };

        unmarshallSingle = function(data) {
            var body, chr, command, divider, headerLines, headers, i, idx, len, line, start, trim, _i, _j, _len, _ref, _ref1;
            divider = data.search(RegExp("" + Byte.LF + Byte.LF));
            headerLines = data.substring(0, divider).split(Byte.LF);
            command = headerLines.shift();
            headers = {};
            trim = function(str) {
                return str.replace(/^\s+|\s+$/g, '');
            };
            _ref = headerLines.reverse();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                line = _ref[_i];
                idx = line.indexOf(':');
                headers[trim(line.substring(0, idx))] = trim(line.substring(idx + 1));
            }
            body = '';
            start = divider + 2;
            if (headers['content-length']) {
                len = parseInt(headers['content-length']);
                body = ('' + data).substring(start, start + len);
            } else {
                chr = null;
                for (i = _j = start, _ref1 = data.length; start <= _ref1="" ?="" _j="" <="" :=""> _ref1; i = start <= 0="" 10000="" _ref1="" ?="" ++_j="" :="" --_j)="" {="" chr="data.charAt(i);" if="" (chr="==" byte.null)="" break;="" }="" body="" +="chr;" return="" new="" frame(command,="" headers,="" body);="" };="" frame.unmarshall="function(datas)" var="" frame,="" frames,="" last_frame,="" r;="" frames="datas.split(RegExp(""" byte.null="" byte.lf="" "*"));="" r="{" frames:="" [],="" partial:="" ''="" r.frames="(function()" _i,="" _len,="" _ref,="" _results;="" _ref="frames.slice(0," -1);="" _results="[];" for="" (_i="0," _len="_ref.length;" _i="" <="" _len;="" _i++)="" frame="_ref[_i];" _results.push(unmarshallsingle(frame));="" })();="" last_frame="frames.slice(-1)[0];" (last_frame="==" ||="" (last_frame.search(regexp(""="" "*$")))="" !="=" -1)="" r.frames.push(unmarshallsingle(last_frame));="" else="" r.partial="last_frame;" frame.marshall="function(command," body)="" frame;="" frame.tostring()="" byte.null;="" client="(function()" now;="" function="" client(ws)="" this.ws="ws;" this.ws.binarytype="arraybuffer" ;="" this.counter="0;" this.connected="false;" this.heartbeat="{" outgoing:="" 10000,="" incoming:="" this.maxwebsocketframesize="16" *="" 1024;="" this.subscriptions="{};" this.partialdata="" client.prototype.debug="function(message)" _ref;="" typeof="" window="" "undefined"="" &&="" null="" (_ref="window.console)" _ref.log(message)="" void="" 0;="" now="function()" (date.now)="" date.now();="" date().valueof;="" client.prototype._transmit="function(command," out;="" out="Frame.marshall(command," (typeof="" this.debug="==" "function")="" this.debug("="">>> " + out);
            }
            while (true) {
                if (out.length > this.maxWebSocketFrameSize) {
                    this.ws.send(out.substring(0, this.maxWebSocketFrameSize));
                    out = out.substring(this.maxWebSocketFrameSize);
                    if (typeof this.debug === "function") {
                        this.debug("remaining = " + out.length);
                    }
                } else {
                    return this.ws.send(out);
                }
            }
        };

        Client.prototype._setupHeartbeat = function(headers) {
            var serverIncoming, serverOutgoing, ttl, v, _ref, _ref1;
            if ((_ref = headers.version) !== Stomp.VERSIONS.V1_1 && _ref !== Stomp.VERSIONS.V1_2) {
                return;
            }
            _ref1 = (function() {
                var _i, _len, _ref1, _results;
                _ref1 = headers['heart-beat'].split(",");
                _results = [];
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                    v = _ref1[_i];
                    _results.push(parseInt(v));
                }
                return _results;
            })(), serverOutgoing = _ref1[0], serverIncoming = _ref1[1];
            if (!(this.heartbeat.outgoing === 0 || serverIncoming === 0)) {
                ttl = Math.max(this.heartbeat.outgoing, serverIncoming);
                if (typeof this.debug === "function") {
                    this.debug("send PING every " + ttl + "ms");
                }
                this.pinger = Stomp.setInterval(ttl, (function(_this) {
                    return function() {
                        _this.ws.send(Byte.LF);
                        return typeof _this.debug === "function" ? _this.debug(">>> PING") : void 0;
                    };
                })(this));
            }
            if (!(this.heartbeat.incoming === 0 || serverOutgoing === 0)) {
                ttl = Math.max(this.heartbeat.incoming, serverOutgoing);
                if (typeof this.debug === "function") {
                    this.debug("check PONG every " + ttl + "ms");
                }
                return this.ponger = Stomp.setInterval(ttl, (function(_this) {
                    return function() {
                        var delta;
                        delta = now() - _this.serverActivity;
                        if (delta > ttl * 2) {
                            if (typeof _this.debug === "function") {
                                _this.debug("did not receive server activity for the last " + delta + "ms");
                            }
                            return _this.ws.close();
                        }
                    };
                })(this));
            }
        };

        Client.prototype._parseConnect = function() {
            var args, connectCallback, errorCallback, headers;
            args = 1 </=></=>